@page "/Families"
@using FamiliesManager.Data
@using Models
@inject IFamiliesService FamiliesService
@inject NavigationManager NavigationManager

<h3>Families</h3>
<p>
Select Family Id: <input type="number" @oninput="@(SetFamilyId)" style="width:50px"/>
</p>

<Button class="btn btn-outline-dark" disabled="@disabled" Clicked="@(() => ViewFamily(familyId))">View</Button>

<Button class="btn btn-outline-dark" Clicked="@(AddFamily)">Add</Button>

<Button Border="Border.Dark" disabled="@disabled" Clicked="@(() => EditFamily(familyId))">Edit</Button>

<Button Border="Border.Dark" disabled="@disabled" Clicked="@(() => RemoveFamily(FamiliesService.GetFamilyById(familyId)))">Remove</Button>

<Row>
    @foreach (var f in families)
    {
        <Column ColumnSize="ColumnSize.Is12.OnTablet.Is12.OnMobile.Is3.OnDesktop.Is3.OnWidescreen.Is3.OnFullHD">
            <Card>
                <CardBody>
                    <CardTitle TextAlignment="TextAlignment.Center" Size="5">Family ID: @f.Id</CardTitle>
                    <CardText TextAlignment="TextAlignment.Center">
                        <ul>
                            <li><b>Address</b>: @f.StreetName @f.HouseNumber</li>
                            <li><b>Adults</b>: @f.Adults.Count</li>
                            <li><b>Children</b>: @f.Children.Count</li>
                            <li><b>Pets</b>: @f.Pets.Count</li>
                        </ul>
                    </CardText>

                </CardBody>
            </Card>
        </Column>
    }
</Row>


@code {
    
    IList<Family> families;
    private int? familyId;
    private bool disabled = true;

    protected override async Task OnInitializedAsync()
    {
        families = FamiliesService.GetFamilies();
    }

    private void ViewFamily(int? id)
    {
        NavigationManager.NavigateTo($"/ViewFamily/{id}");
    }

    private void AddFamily()
    {
        NavigationManager.NavigateTo($"/AddFamily");
    }

    private void EditFamily(int? id)
    {
        NavigationManager.NavigateTo($"EditFamily/{id}");
    }

    private void RemoveFamily(Family family)
    {
        FamiliesService.RemoveFamily(family);
        families.Remove(family);
    }
    
    private void SetFamilyId(ChangeEventArgs changeEventArgs)
    {
        familyId = null;
        if (familyId is null)
        {
            disabled = true;
        }
        
        int max = families.Max(family => family.Id);
        
        try
        {
            familyId = int.Parse(changeEventArgs.Value.ToString());
            if (familyId <= 0 || familyId > max)
            {
                disabled = true;
            }
            else
            {
                disabled = false;
            }
        }
        catch (Exception e)
        {
        }
    }
}