@page "/ViewFamilies"
@using Models
@using FamiliesManager.Data
@inject NavigationManager NavigationManager
@inject IFamiliesService service
<h3>Families</h3>
<p>
    Filter by User Id: <input type="number" @oninput="@((arg) => FilterById(arg))" style="width:50px"/>
</p>


@if (familiesDisplayed == null)
{
    <p>
        <em>Loading...</em>
    </p>
}
else if (!familiesDisplayed.Any())
{
    <p>
        <em>List is empty</em>
    </p>
}
else
{
    <table class="table">
        <thead>
        <tr>
            <th>Id</th>
            <th>StreetName</th>
            <th>HouseNumber</th>
            <th>Adults</th>
            <th>Children</th>
            <th>Pets</th>
            <AuthorizeView>
                <th>Edit</th>
                <th>Remove</th>
            </AuthorizeView>
        </tr>
        </thead>
        <tbody>
        @foreach (var item in familiesDisplayed)
        {
            <tr>
                <td>@item.Id</td>
                <td>@item.StreetName</td>
                <td>@item.HouseNumber</td>
                <td>@item.Adults.Count</td>
                <td>@item.Children.Count</td>
                <td>@item.Pets.Count</td>
                <AuthorizeView>
                <td>
                    <button @onclick="@(() => Edit(item.Id))">
                        <i class="oi oi-pencil" style="color:#1b6ec2"/>
                    </button>
                </td>
                <td>
                    <button @onclick="@(() => RemoveFamily(item))">
                        <i class="oi oi-trash" style="color:red"/>
                    </button>
                </td>
                </AuthorizeView>
            </tr>
        }
        </tbody>
    </table>
}

@code {

    private IList<Family> allFamiles;
    private IList<Family> familiesDisplayed;
    private int? filterById;
    
    protected override async Task OnInitializedAsync()
    {
        allFamiles = service.GetFamilies().ToList();
        familiesDisplayed = allFamiles;
    }

    private void Edit(int id)
    {
        NavigationManager.NavigateTo($"edit-adult/{id}");
    }

    private void RemoveFamily(Family family)
    {
        service.RemoveFamily(family);
        allFamiles.Remove(family);
        familiesDisplayed.Remove(family);
    }

    private void FilterById(ChangeEventArgs changeEventArgs)
    {
        filterById = null;
        try
        {
            filterById = int.Parse(changeEventArgs.Value.ToString());
        }
        catch (Exception e)
        {
        }
        ExecuteFilter();
    }

    private void ExecuteFilter()
    {
        familiesDisplayed = allFamiles.Where(a => filterById != null && a.Id == filterById || filterById == null).ToList();
    }

}