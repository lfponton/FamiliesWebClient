@page "/view-adults"
@using Models
@using FamiliesManager.Data
@inject NavigationManager NavigationManager
@inject IAdultsService service
<h3>Adults</h3>
<p>
    Filter by User Id: <input type="number" @oninput="@((arg) => FilterById(arg))" style="width:50px"/>
</p>


@if (adultsDisplayed == null)
{
    <p>
        <em>Loading...</em>
    </p>
}
else if (!adultsDisplayed.Any())
{
    <p>
        <em>List is empty</em>
    </p>
}
else
{
    <table class="table">
        <thead>
        <tr>
            <th>Id</th>
            <th>First Name</th>
            <th>Last Name</th>
            <th>Hair Color</th>
            <th>Eye Color</th>
            <th>Age</th>
            <th>Weight</th>
            <th>Height</th>
            <th>Sex</th>
            <th>Job Title</th>
            <th>Salary</th>
            <AuthorizeView>
            <th>Edit</th>
            <th>Remove</th>
            </AuthorizeView>
        </tr>
        </thead>
        <tbody>
        @foreach (var item in adultsDisplayed)
        {
            <tr>
                <td>@item.Id</td>
                <td>@item.FirstName</td>
                <td>@item.LastName</td>
                <td>@item.HairColor</td>
                <td>@item.EyeColor</td>
                <td>@item.Age</td>
                <td>@item.Weight</td>
                <td>@item.Height</td>
                <td>@item.Sex</td>
                <td>@item.JobTitle.JobTitle</td>
                <td>@item.JobTitle.Salary</td>
                <AuthorizeView>
                <td>
                    <button @onclick="@(() => Edit(item.Id))">
                        <i class="oi oi-pencil" style="color:#1b6ec2"/>
                    </button>
                </td>
                <td>
                    <button @onclick="@(() => RemoveAdult(item))">
                        <i class="oi oi-trash" style="color:red"/>
                    </button>
                </td>
                </AuthorizeView>
            </tr>
        }
        </tbody>
    </table>
}

@code {

    private IList<Adult> allAdults;
    private IList<Adult> adultsDisplayed;
    private int? filterById;
    
    protected override async Task OnInitializedAsync()
    {
        allAdults = service.GetAdults().ToList();
        adultsDisplayed = allAdults;
    }

    private void Edit(int id)
    {
        NavigationManager.NavigateTo($"edit-adult/{id}");
    }

    private void RemoveAdult(Adult adult)
    {
        service.RemoveAdult(adult);
        allAdults.Remove(adult);
        adultsDisplayed.Remove(adult);
    }

    private void FilterById(ChangeEventArgs changeEventArgs)
    {
        filterById = null;
        try
        {
            filterById = int.Parse(changeEventArgs.Value.ToString());
        }
        catch (Exception e)
        {
        }
        ExecuteFilter();
    }

    private void ExecuteFilter()
    {
        adultsDisplayed = allAdults.Where(a => filterById != null && a.Id == filterById || filterById == null).ToList();
    }

}